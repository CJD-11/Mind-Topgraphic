# MiDaS Depth Scanner "Mind Topographic"- User Guide

This comprehensive guide will walk you through using the MiDaS Depth Scanner system for creating stunning AI-powered artistic videos with depth-based scanning effects.

##  Overview

MiDaS Depth Scanner transforms static images into dynamic artistic videos by:

- **AI Depth Estimation**: Using advanced MiDaS models to analyze image depth
- **Progressive Scanning**: Creating animated sweeps that reveal depth contours
- **4K Video Generation**: Producing professional-quality output
- **Artistic Effects**: Applying glow, fade, and color enhancement effects
- **Batch Processing**: Handling multiple images automatically

## Getting Started

### System Requirements

**Minimum Requirements:**
- Python 3.8 or higher
- 8GB RAM
- 10GB free disk space
- CPU: Intel i5 or AMD Ryzen 5 equivalent

**Recommended Requirements:**
- Python 3.9+
- 16GB+ RAM
- NVIDIA GPU with 6GB+ VRAM (RTX 3060 or better)
- 50GB+ free disk space for 4K videos
- CPU: Intel i7 or AMD Ryzen 7 equivalent

**GPU Support:**
- CUDA-compatible NVIDIA GPU (strongly recommended)
- AMD GPUs supported through ROCm (experimental)
- CPU processing available but significantly slower

### Installation

1. **Clone the Repository:**
   ```bash
   git clone https://github.com/YOUR_USERNAME/midas-depth-scanner.git
   cd midas-depth-scanner
   ```

2. **Create Virtual Environment (Recommended):**
   ```bash
   python -m venv depth_scanner_env
   
   # Windows
   depth_scanner_env\Scripts\activate
   
   # macOS/Linux
   source depth_scanner_env/bin/activate
   ```

3. **Install Dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

4. **Verify Installation:**
   ```bash
   python src/depth_scanner.py --help
   ```

5. **Test GPU Support (Optional):**
   ```bash
   python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
   ```

### First Run

1. **Prepare Test Image:**
   - Place an image in the `assets/sample_images/` folder
   - Supported formats: JPG, PNG, BMP, TIFF
   - Any resolution (automatically scaled to 4K)

2. **Basic Test:**
   ```bash
   python src/depth_scanner.py --input assets/sample_images/your_image.jpg
   ```

3. **Expected Output:**
   - Progress messages showing depth estimation and video generation
   - 4K MP4 video saved to `output/videos/`
   - Processing time depends on hardware (1-10 minutes typical)

## üìê Understanding the Scanning Process

### How It Works

1. **Depth Analysis**: AI model analyzes image to create depth map
2. **Contour Generation**: System identifies depth layers and boundaries
3. **Scanning Animation**: Progressive horizontal sweep reveals contours
4. **Visual Effects**: Red glow lines, fade persistence, and color enhancement
5. **Video Compilation**: Frames combined into smooth 4K video

### Visual Elements

**Main Components:**
- **Base Image**: Original image with scanning effects applied
- **Scan Line**: Red horizontal line that sweeps across the image
- **Depth Contours**: Red outlines that appear as scan line passes over depth changes
- **Glow Effects**: Soft blur and persistence of scanning trails
- **Background Fade**: Subtle black & white imprint of scanned areas

**Temporal Effects:**
- **Progressive Reveal**: Depth information appears as scan line moves
- **Persistence**: Previous scan traces fade gradually over time
- **Looping**: Multiple scan cycles for hypnotic effect
- **Final Hold**: Static frame holds at end for several seconds

## ‚öôÔ∏è Configuration and Settings

### Command Line Options

**Basic Usage:**
```bash
# Process single image
python src/depth_scanner.py --input image.jpg

# Process directory
python src/depth_scanner.py --input photos/ --batch

# High quality mode
python src/depth_scanner.py --input image.jpg --quality high
```

**Quality Presets:**
```bash
# Performance (1080p, fast)
python src/depth_scanner.py --input image.jpg --quality low

# Balanced (1440p, good quality)
python src/depth_scanner.py --input image.jpg --quality medium

# High quality (4K, detailed)
python src/depth_scanner.py --input image.jpg --quality high

# Ultra quality (4K, maximum effects)
python src/depth_scanner.py --input image.jpg --quality ultra
```

**Custom Parameters:**
```bash
# Custom resolution
python src/depth_scanner.py --input image.jpg --resolution 1920x1080

# Custom frame rate
python src/depth_scanner.py --input image.jpg --fps 60

# Multiple scan loops
python src/depth_scanner.py --input image.jpg --scan-loops 3

# Effect intensity
python src/depth_scanner.py --input image.jpg --effect-intensity 2.0
```

### Configuration Files

**Using Presets:**
```bash
# Artistic preset (high quality, enhanced effects)
python src/depth_scanner.py --input image.jpg --config config/artistic.json

# Performance preset (optimized for speed)
python src/depth_scanner.py --input image.jpg --config config/performance.json

# Cinematic preset (cinema-quality output)
python src/depth_scanner.py --input image.jpg --config config/cinematic.json
```

**Creating Custom Config:**
```json
{
  "fps": 30,
  "target_width": 3840,
  "target_height": 2160,
  "scan_loops": 2,
  "fade_decay": 0.94,
  "red_strength": 1.5,
  "blur_radius": 1.5,
  "contour_levels": 150,
  "depth_model": "DPT_Large"
}
```

##  Creative Applications

### Image Selection Tips

**Best Results:**
- **High Contrast**: Images with clear foreground/background separation
- **Depth Variation**: Scenes with multiple depth layers (landscapes, portraits, architecture)
- **Sharp Details**: Well-focused images with clear edges and textures
- **Good Lighting**: Even lighting without extreme shadows
- **Interesting Composition**: Visual elements that will benefit from depth highlighting

**Image Types That Work Well:**
- **Portraits**: Face and body depth creates striking effects
- **Landscapes**: Mountains, trees, and buildings provide depth layers
- **Architecture**: Buildings and structures with geometric depth
- **Street Scenes**: Urban environments with depth complexity
- **Nature**: Flowers, plants, and natural formations
- **Art**: Paintings and sculptures with dimensional elements

**Avoid:**
- Very flat or uniform images
- Extremely dark or overexposed images
- Images with heavy motion blur
- Very low resolution images (will be upscaled)

### Effect Customization

**Scanning Parameters:**
```bash
# Slow, dramatic scanning
python src/depth_scanner.py --input image.jpg --scan-speed slow --scan-loops 3

# Fast, energetic scanning  
python src/depth_scanner.py --input image.jpg --scan-speed fast --scan-loops 1

# Subtle effects
python src/depth_scanner.py --input image.jpg --effect-intensity 0.5

# Dramatic effects
python src/depth_scanner.py --input image.jpg --effect-intensity 2.0
```

**Custom Configuration Examples:**

**Subtle Artistic Effect:**
```json
{
  "scan_loops": 1,
  "fade_decay": 0.98,
  "red_strength": 0.8,
  "blur_radius": 1.0,
  "bw_opacity": 0.05
}
```

**Dramatic Cinematic Effect:**
```json
{
  "scan_loops": 3,
  "fade_decay": 0.90,
  "red_strength": 2.5,
  "blur_radius": 3.0,
  "bw_opacity": 0.20
}
```

## üîß Advanced Features

### Batch Processing

**Process Directory:**
```bash
# Process all images in folder
python src/depth_scanner.py --input photos/ --batch

# Custom output directory
python src/depth_scanner.py --input photos/ --output videos/ --batch

# With custom settings
python src/depth_scanner.py --input photos/ --batch --quality high --fps 60
```

**Video Sequence Creation:**
```bash
# Create single video from multiple images
python src/depth_scanner.py --input photos/ --sequence --output sequence.mp4
```

### Preview and Testing

**Preview Effects:**
```bash
# Preview without creating full video
python src/depth_scanner.py --input image.jpg --preview
```

**Save Depth Maps:**
```bash
# Export depth map visualizations
python src/depth_scanner.py --input image.jpg --save-depth
```

**Debug Information:**
```bash
# Verbose output with timing information
python src/depth_scanner.py --input image.jpg --verbose

# Full debug mode
python src/depth_scanner.py --input image.jpg --debug
```

### Performance Optimization

**GPU Optimization:**
```bash
# Force GPU usage
python src/depth_scanner.py --input image.jpg --gpu

# Force CPU usage (slower but more compatible)
python src/depth_scanner.py --input image.jpg --cpu

# Specify number of CPU threads
python src/depth_scanner.py --input image.jpg --threads 8
```

**Memory Management:**
```bash
# Lower memory usage (slower processing)
python src/depth_scanner.py --input image.jpg --quality low

# Monitor GPU memory usage
nvidia-smi  # Run in separate terminal during processing
```

## üìä Understanding Output

### Video Specifications

**Default 4K Output:**
- Resolution: 3840 √ó 2160 pixels
- Frame Rate: 30 FPS
- Codec: H.264 (MP4V)
- Duration: ~10-15 seconds (depends on scan loops)
- File Size: 50-200MB typical

**Quality Settings Impact:**
- **Low**: 1080p, ~25MB, faster processing
- **Medium**: 1440p, ~75MB, balanced quality/speed
- **High**: 4K, ~150MB, detailed effects
- **Ultra**: 4K, ~250MB, maximum quality

### File Organization

**Default Output Structure:**
```
output/
‚îú‚îÄ‚îÄ videos/                 # Generated videos
‚îÇ   ‚îú‚îÄ‚îÄ image1_DepthScan_4K_20231201_143022.mp4
‚îÇ   ‚îî‚îÄ‚îÄ image2_DepthScan_4K_20231201_143156.mp4
‚îú‚îÄ‚îÄ depth_maps/            # Depth visualizations (if saved)
‚îÇ   ‚îú‚îÄ‚îÄ image1_depth_map.jpg
‚îÇ   ‚îî‚îÄ‚îÄ image2_depth_map.jpg
‚îî‚îÄ‚îÄ frames/                # Individual frames (if enabled)
    ‚îú‚îÄ‚îÄ image1_frame_001.jpg
    ‚îî‚îÄ‚îÄ image1_frame_002.jpg
```

### Performance Metrics

**Typical Processing Times:**
- **GPU (RTX 4070)**: 1-3 minutes per image
- **GPU (RTX 3060)**: 3-5 minutes per image  
- **CPU (Intel i7)**: 10-20 minutes per image
- **CPU (Intel i5)**: 15-30 minutes per image

**Optimization Tips:**
- Use GPU when available (10x+ faster)
- Lower quality settings for faster processing
- Close other GPU-intensive applications
- Ensure adequate cooling for sustained processing

## Creative Techniques

### Artistic Styles

**Portrait Enhancement:**
```bash
# Emphasize facial features and depth
python src/depth_scanner.py --input portrait.jpg \
  --effect-intensity 1.2 \
  --scan-loops 2 \
  --fps 24
```

**Landscape Drama:**
```bash
# Reveal landscape depth layers
python src/depth_scanner.py --input landscape.jpg \
  --scan-speed slow \
  --effect-intensity 1.8 \
  --scan-loops 3
```

**Architectural Focus:**
```bash
# Highlight building structure
python src/depth_scanner.py --input building.jpg \
  --config config/cinematic.json \
  --fps 30
```

### Social Media Optimization

**Instagram/TikTok:**
```bash
# Square format for social media
python src/depth_scanner.py --input image.jpg \
  --resolution 1080x1080 \
  --fps 30 \
  --scan-speed fast
```

**YouTube/Vimeo:**
```bash
# High quality for video platforms
python src/depth_scanner.py --input image.jpg \
  --quality ultra \
  --fps 60
```

### Series and Collections

**Consistent Styling:**
```bash
# Process series with identical settings
python src/depth_scanner.py --input series/ \
  --batch \
  --config config/artistic.json
```

**Varying Intensity:**
- Process same image with different effect intensities
- Create progression from subtle to dramatic
- Combine multiple variations in video editing software

## Troubleshooting

### Common Issues

**Memory Errors:**
```
CUDA out of memory
```
**Solutions:**
- Reduce image size: `--resolution 1920x1080`
- Use performance preset: `--quality low`
- Close other GPU applications
- Restart Python between large batches

**Slow Processing:**
```
Processing taking too long
```
**Solutions:**
- Enable GPU: `--gpu`
- Check GPU usage: `nvidia-smi`
- Reduce quality: `--quality performance`
- Use smaller images

**Poor Quality Results:**
```
Depth detection not working well
```
**Solutions:**
- Try different images (higher contrast recommended)
- Increase contour levels in config
- Use DPT_Large model for better accuracy
- Ensure good lighting in source images

**Installation Issues:**
```
Import errors or missing dependencies
```
**Solutions:**
- Use virtual environment
- Update pip: `pip install --upgrade pip`
- Install PyTorch separately: visit pytorch.org for system-specific installation
- Check Python version (3.8+ required)

### Performance Optimization

**GPU Not Being Used:**
```bash
# Check CUDA availability
python -c "import torch; print(torch.cuda.is_available())"

# Force GPU usage
python src/depth_scanner.py --input image.jpg --gpu
```

**Out of Memory:**
```bash
# Reduce memory usage
python src/depth_scanner.py --input image.jpg \
  --resolution 1920x1080 \
  --quality low
```

**Slow Batch Processing:**
```bash
# Process in smaller batches
# Split large directories into smaller folders
# Use performance preset for speed
python src/depth_scanner.py --input batch1/ --quality low --batch
```

### Quality Issues

**Artifacts in Output:**
- Check input image quality
- Try different depth model: `DPT_Hybrid` or `MiDaS_small`
- Adjust contour levels in configuration
- Ensure stable GPU temperatures

**Inconsistent Results:**
- Use consistent lighting across images
- Maintain similar image quality/resolution
- Use same configuration for entire batch
- Check for corrupted input files

## üìà Advanced Configuration

### Custom Effect Parameters

**Fine-Tuning Visual Effects:**
```json
{
  "fade_decay": 0.94,          // How quickly scan trails fade (0.0-1.0)
  "red_strength": 1.5,         // Intensity of red scanning line (0.0-3.0)
  "bw_opacity": 0.12,          // Strength of depth imprint (0.0-1.0)
  "blur_radius": 1.5,          // Glow effect size (0.0-5.0)
  "contour_levels": 150,       // Number of depth layers (50-300)
  "scan_band_height": 8        // Width of scanning band (2-20)
}
```

**Color Customization:**
```json
{
  "scan_line_color": [0, 0, 255],      // Red scanning line [B,G,R]
  "contour_color": [0, 0, 255],        // Depth contour color [B,G,R]
  "background_fade_color": [0, 0, 0],  // Background fade [B,G,R]
  "pad_color": [0, 0, 0]               // Padding color [B,G,R]
}
```

### Environment Variables

**Production Deployment:**
```bash
# Set environment variables for automated processing
export DEPTH_SCANNER_INPUT="/path/to/images"
export DEPTH_SCANNER_OUTPUT="/path/to/videos"
export DEPTH_SCANNER_GPU=true
export DEPTH_SCANNER_QUALITY=90
export DEPTH_SCANNER_THREADS=8

# Run with environment settings
python src/depth_scanner.py --batch
```

### Automated Workflows

**Batch Script Example:**
```bash
#!/bin/bash
# Process multiple directories with different settings

# High quality portraits
python src/depth_scanner.py --input portraits/ --config config/artistic.json --batch

# Fast social media content
python src/depth_scanner.py --input social/ --quality low --fps 60 --batch

# Cinematic landscapes
python src/depth_scanner.py --input landscapes/ --config config/cinematic.json --batch
```

##  Best Practices

### Workflow Optimization

**Project Organization:**
1. **Input Preparation**: Organize images in themed folders
2. **Configuration Planning**: Create custom configs for different styles
3. **Batch Processing**: Process similar images together
4. **Output Management**: Organize videos by project/style
5. **Quality Control**: Preview before full processing

**File Management:**
- Use descriptive filenames for easy identification
- Keep original images separate from processed videos
- Back up important configurations and presets
- Monitor disk space (4K videos are large)

### Quality Control

**Pre-Processing Checklist:**
- [ ] Image resolution adequate (minimum 1080p recommended)
- [ ] Good contrast and lighting
- [ ] Sharp focus and clear details
- [ ] Appropriate depth variation in scene
- [ ] Compatible file format

**Post-Processing Review:**
- [ ] Depth detection working correctly
- [ ] Scanning effects visible and appealing
- [ ] Video quality meets requirements
- [ ] No artifacts or errors
- [ ] Appropriate duration and timing

### Creative Guidelines

**Composition Tips:**
- **Leading Lines**: Use depth to guide viewer attention
- **Foreground Interest**: Include compelling foreground elements
- **Depth Layers**: Ensure multiple depth planes in image
- **Visual Balance**: Consider how scanning will affect composition
- **Color Harmony**: Red scanning lines work best with cooler backgrounds

**Storytelling Applications:**
- **Reveal Technique**: Use scanning to progressively reveal story elements
- **Emphasis**: Highlight important depth relationships
- **Mood Creation**: Adjust scanning speed and intensity for emotional impact
- **Transition Effects**: Use between scenes or story segments
- **Abstract Art**: Create purely visual, non-narrative experiences


### Future Development

**Planned Features:**
- Real-time processing for live applications
- Additional scanning patterns (vertical, radial, spiral)
- Advanced color effects and artistic filters
- Web interface for easier access
- Mobile device support
- Integration with popular video editing software

**Research Applications:**
- Depth perception studies
- AI model comparison and evaluation
- Visual effects research and development
- Educational computer vision demonstrations
- Art therapy and creative expression tools

---



